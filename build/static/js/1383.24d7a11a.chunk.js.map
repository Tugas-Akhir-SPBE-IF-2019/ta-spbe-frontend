{"version":3,"file":"static/js/1383.24d7a11a.chunk.js","mappings":"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","sources":["containers/Login/selector.tsx","containers/Login/index.tsx","../node_modules/@react-oauth/google/dist/index.esm.js"],"sourcesContent":["const loginMessageSelector = (state: any) => {\n    return state?.loginReducer?.loginMessage\n        ? state.loginReducer.loginMessage\n        : null;\n};\n\nconst institutionDataSelector = (state: any) => {\n    return state?.loginReducer?.institutionData\n        ? state.loginReducer.institutionData\n        : [];\n};\n\nexport {\n    loginMessageSelector,\n    institutionDataSelector\n};\n","import { lazy, PureComponent } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { loginMessageSelector, institutionDataSelector } from \"./selector\";\nimport { loginWithGoogle, getInstitutionData } from \"./action\";\nimport { GoogleOAuthProvider } from '@react-oauth/google';\n\nconst LoginComponent = lazy(() => import(\"../../components/Login\"));\n\nexport class LoginContainer extends PureComponent<any, any> {\n    static propTypes = {\n        history: PropTypes.any,\n        loginMessageResponse: PropTypes.object,\n        institutionDataResponse: PropTypes.array,\n    };\n\n    constructor(props: any) {\n        super(props);\n        this.state = {\n            access_token: \"\",\n        };\n        this.handleLoginState = this.handleLoginState.bind(this);\n    }\n\n    componentDidMount() {\n        const { authToken } = this.props;\n        if (authToken) {\n            this.props.history.replace(\"/dashboard\");\n        }\n    }\n\n    componentDidUpdate(prevProps: any, prevState: any) {\n        const { loginMessageResponse, institutionDataResponse } = this.props;\n        const { access_token } = this.state;\n        if (prevState.access_token !== access_token) {\n            this.props.initiateGoogleLogin(this.state);\n        }\n        if (prevProps.loginMessageResponse !== loginMessageResponse) {\n            if (loginMessageResponse.access_token && loginMessageResponse.refresh_token) {\n                localStorage.setItem(\"AUTH_TOKEN\", loginMessageResponse.access_token.token);\n                localStorage.setItem(\"REFRESH_TOKEN\", loginMessageResponse.refresh_token.token);\n                this.props.getProfileInstitutionData();\n            }\n        }\n        if (prevProps.institutionDataResponse !== institutionDataResponse) {\n            if (institutionDataResponse.length !== 0) {\n                this.props.history.replace(\"/dashboard\");\n            }\n            else {\n                this.props.history.replace(\"/edit-profile/institution\");\n            }\n        }\n\n    }\n\n    private handleLoginState (token: string): void {\n        this.setState({\n            ...this.state,\n            access_token: token,\n        });\n    }\n\n    render() {\n        return (\n            <GoogleOAuthProvider clientId=\"657950965679-e0t64efubu8769a9du5c09vkke359ek9.apps.googleusercontent.com\">\n                <LoginComponent\n                    handleLoginState={this.handleLoginState}\n                />\n            </GoogleOAuthProvider>\n        )\n    }\n}\n\nconst mapStateToProps = (state: any) => {\n    return {\n        loginMessageResponse: loginMessageSelector(state),\n        institutionDataResponse: institutionDataSelector(state),\n    };\n};\n  \nfunction mapDispatchToProps(dispatch: any) {\n    return {\n        initiateGoogleLogin: (params: any) => dispatch(loginWithGoogle(params)),\n        getProfileInstitutionData: () => dispatch(getInstitutionData()),\n    };\n}\n  \nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(LoginContainer);","import React, { useState, useRef, useEffect, createContext, useMemo, useContext, useCallback } from 'react';\n\nfunction useLoadGsiScript(options = {}) {\r\n    const { onScriptLoadSuccess, onScriptLoadError } = options;\r\n    const [scriptLoadedSuccessfully, setScriptLoadedSuccessfully] = useState(false);\r\n    const onScriptLoadSuccessRef = useRef(onScriptLoadSuccess);\r\n    onScriptLoadSuccessRef.current = onScriptLoadSuccess;\r\n    const onScriptLoadErrorRef = useRef(onScriptLoadError);\r\n    onScriptLoadErrorRef.current = onScriptLoadError;\r\n    useEffect(() => {\r\n        const scriptTag = document.createElement('script');\r\n        scriptTag.src = 'https://accounts.google.com/gsi/client';\r\n        scriptTag.async = true;\r\n        scriptTag.defer = true;\r\n        scriptTag.onload = () => {\r\n            var _a;\r\n            setScriptLoadedSuccessfully(true);\r\n            (_a = onScriptLoadSuccessRef.current) === null || _a === void 0 ? void 0 : _a.call(onScriptLoadSuccessRef);\r\n        };\r\n        scriptTag.onerror = () => {\r\n            var _a;\r\n            setScriptLoadedSuccessfully(false);\r\n            (_a = onScriptLoadErrorRef.current) === null || _a === void 0 ? void 0 : _a.call(onScriptLoadErrorRef);\r\n        };\r\n        document.body.appendChild(scriptTag);\r\n        return () => {\r\n            document.body.removeChild(scriptTag);\r\n        };\r\n    }, []);\r\n    return scriptLoadedSuccessfully;\r\n}\n\nconst GoogleOAuthContext = createContext(null);\r\nfunction GoogleOAuthProvider({ clientId, onScriptLoadSuccess, onScriptLoadError, children, }) {\r\n    const scriptLoadedSuccessfully = useLoadGsiScript({\r\n        onScriptLoadSuccess,\r\n        onScriptLoadError,\r\n    });\r\n    const contextValue = useMemo(() => ({\r\n        clientId,\r\n        scriptLoadedSuccessfully,\r\n    }), [clientId, scriptLoadedSuccessfully]);\r\n    return (React.createElement(GoogleOAuthContext.Provider, { value: contextValue }, children));\r\n}\r\nfunction useGoogleOAuth() {\r\n    const context = useContext(GoogleOAuthContext);\r\n    if (!context) {\r\n        throw new Error('Google OAuth components must be used within GoogleOAuthProvider');\r\n    }\r\n    return context;\r\n}\n\nfunction extractClientId(credentialResponse) {\r\n    var _a;\r\n    const clientId = (_a = credentialResponse === null || credentialResponse === void 0 ? void 0 : credentialResponse.clientId) !== null && _a !== void 0 ? _a : credentialResponse === null || credentialResponse === void 0 ? void 0 : credentialResponse.client_id;\r\n    return clientId;\r\n}\n\nconst containerHeightMap = { large: 40, medium: 32, small: 20 };\r\nfunction GoogleLogin({ onSuccess, onError, useOneTap, promptMomentNotification, type = 'standard', theme = 'outline', size = 'large', text, shape, logo_alignment, width, locale, click_listener, ...props }) {\r\n    const btnContainerRef = useRef(null);\r\n    const { clientId, scriptLoadedSuccessfully } = useGoogleOAuth();\r\n    const onSuccessRef = useRef(onSuccess);\r\n    onSuccessRef.current = onSuccess;\r\n    const onErrorRef = useRef(onError);\r\n    onErrorRef.current = onError;\r\n    const promptMomentNotificationRef = useRef(promptMomentNotification);\r\n    promptMomentNotificationRef.current = promptMomentNotification;\r\n    useEffect(() => {\r\n        var _a, _b, _c;\r\n        if (!scriptLoadedSuccessfully)\r\n            return;\r\n        (_a = window.google) === null || _a === void 0 ? void 0 : _a.accounts.id.initialize({\r\n            client_id: clientId,\r\n            callback: (credentialResponse) => {\r\n                var _a;\r\n                if (!(credentialResponse === null || credentialResponse === void 0 ? void 0 : credentialResponse.credential)) {\r\n                    return (_a = onErrorRef.current) === null || _a === void 0 ? void 0 : _a.call(onErrorRef);\r\n                }\r\n                const { credential, select_by } = credentialResponse;\r\n                onSuccessRef.current({\r\n                    credential,\r\n                    clientId: extractClientId(credentialResponse),\r\n                    select_by,\r\n                });\r\n            },\r\n            ...props,\r\n        });\r\n        (_b = window.google) === null || _b === void 0 ? void 0 : _b.accounts.id.renderButton(btnContainerRef.current, {\r\n            type,\r\n            theme,\r\n            size,\r\n            text,\r\n            shape,\r\n            logo_alignment,\r\n            width,\r\n            locale,\r\n            click_listener,\r\n        });\r\n        if (useOneTap)\r\n            (_c = window.google) === null || _c === void 0 ? void 0 : _c.accounts.id.prompt(promptMomentNotificationRef.current);\r\n        return () => {\r\n            var _a;\r\n            if (useOneTap)\r\n                (_a = window.google) === null || _a === void 0 ? void 0 : _a.accounts.id.cancel();\r\n        };\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [\r\n        clientId,\r\n        scriptLoadedSuccessfully,\r\n        useOneTap,\r\n        type,\r\n        theme,\r\n        size,\r\n        text,\r\n        shape,\r\n        logo_alignment,\r\n        width,\r\n        locale,\r\n    ]);\r\n    return (React.createElement(\"div\", { ref: btnContainerRef, style: { height: containerHeightMap[size] } }));\r\n}\n\nfunction googleLogout() {\r\n    var _a;\r\n    (_a = window.google) === null || _a === void 0 ? void 0 : _a.accounts.id.disableAutoSelect();\r\n}\n\n/* eslint-disable import/export */\r\nfunction useGoogleLogin({ flow = 'implicit', scope = '', onSuccess, onError, onNonOAuthError, overrideScope, ...props }) {\r\n    const { clientId, scriptLoadedSuccessfully } = useGoogleOAuth();\r\n    const clientRef = useRef();\r\n    const onSuccessRef = useRef(onSuccess);\r\n    onSuccessRef.current = onSuccess;\r\n    const onErrorRef = useRef(onError);\r\n    onErrorRef.current = onError;\r\n    const onNonOAuthErrorRef = useRef(onNonOAuthError);\r\n    onNonOAuthErrorRef.current = onNonOAuthError;\r\n    useEffect(() => {\r\n        var _a;\r\n        if (!scriptLoadedSuccessfully)\r\n            return;\r\n        const clientMethod = flow === 'implicit' ? 'initTokenClient' : 'initCodeClient';\r\n        const client = (_a = window.google) === null || _a === void 0 ? void 0 : _a.accounts.oauth2[clientMethod]({\r\n            client_id: clientId,\r\n            scope: overrideScope ? scope : `openid profile email ${scope}`,\r\n            callback: (response) => {\r\n                var _a, _b;\r\n                if (response.error)\r\n                    return (_a = onErrorRef.current) === null || _a === void 0 ? void 0 : _a.call(onErrorRef, response);\r\n                (_b = onSuccessRef.current) === null || _b === void 0 ? void 0 : _b.call(onSuccessRef, response);\r\n            },\r\n            error_callback: (nonOAuthError) => {\r\n                var _a;\r\n                (_a = onNonOAuthErrorRef.current) === null || _a === void 0 ? void 0 : _a.call(onNonOAuthErrorRef, nonOAuthError);\r\n            },\r\n            ...props,\r\n        });\r\n        clientRef.current = client;\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [clientId, scriptLoadedSuccessfully, flow, scope]);\r\n    const loginImplicitFlow = useCallback((overrideConfig) => { var _a; return (_a = clientRef.current) === null || _a === void 0 ? void 0 : _a.requestAccessToken(overrideConfig); }, []);\r\n    const loginAuthCodeFlow = useCallback(() => { var _a; return (_a = clientRef.current) === null || _a === void 0 ? void 0 : _a.requestCode(); }, []);\r\n    return flow === 'implicit' ? loginImplicitFlow : loginAuthCodeFlow;\r\n}\n\nfunction useGoogleOneTapLogin({ onSuccess, onError, promptMomentNotification, cancel_on_tap_outside, hosted_domain, }) {\r\n    const { clientId, scriptLoadedSuccessfully } = useGoogleOAuth();\r\n    const onSuccessRef = useRef(onSuccess);\r\n    onSuccessRef.current = onSuccess;\r\n    const onErrorRef = useRef(onError);\r\n    onErrorRef.current = onError;\r\n    const promptMomentNotificationRef = useRef(promptMomentNotification);\r\n    promptMomentNotificationRef.current = promptMomentNotification;\r\n    useEffect(() => {\r\n        var _a, _b;\r\n        if (!scriptLoadedSuccessfully)\r\n            return;\r\n        (_a = window.google) === null || _a === void 0 ? void 0 : _a.accounts.id.initialize({\r\n            client_id: clientId,\r\n            callback: (credentialResponse) => {\r\n                var _a;\r\n                if (!(credentialResponse === null || credentialResponse === void 0 ? void 0 : credentialResponse.credential)) {\r\n                    return (_a = onErrorRef.current) === null || _a === void 0 ? void 0 : _a.call(onErrorRef);\r\n                }\r\n                const { credential, select_by } = credentialResponse;\r\n                onSuccessRef.current({\r\n                    credential,\r\n                    clientId: extractClientId(credentialResponse),\r\n                    select_by,\r\n                });\r\n            },\r\n            hosted_domain,\r\n            cancel_on_tap_outside,\r\n        });\r\n        (_b = window.google) === null || _b === void 0 ? void 0 : _b.accounts.id.prompt(promptMomentNotificationRef.current);\r\n        return () => {\r\n            var _a;\r\n            (_a = window.google) === null || _a === void 0 ? void 0 : _a.accounts.id.cancel();\r\n        };\r\n    }, [\r\n        clientId,\r\n        scriptLoadedSuccessfully,\r\n        cancel_on_tap_outside,\r\n        hosted_domain,\r\n    ]);\r\n}\n\n/**\r\n * Checks if the user granted all the specified scope or scopes\r\n * @returns True if all the scopes are granted\r\n */\r\nfunction hasGrantedAllScopesGoogle(tokenResponse, firstScope, ...restScopes) {\r\n    if (!window.google)\r\n        return false;\r\n    return window.google.accounts.oauth2.hasGrantedAllScopes(tokenResponse, firstScope, ...restScopes);\r\n}\n\n/**\r\n * Checks if the user granted any of the specified scope or scopes.\r\n * @returns True if any of the scopes are granted\r\n */\r\nfunction hasGrantedAnyScopeGoogle(tokenResponse, firstScope, ...restScopes) {\r\n    if (!window.google)\r\n        return false;\r\n    return window.google.accounts.oauth2.hasGrantedAnyScope(tokenResponse, firstScope, ...restScopes);\r\n}\n\nexport { GoogleLogin, GoogleOAuthProvider, googleLogout, hasGrantedAllScopesGoogle, hasGrantedAnyScopeGoogle, useGoogleLogin, useGoogleOneTapLogin };\n"],"names":["loginMessageSelector","state","loginReducer","loginMessage","institutionDataSelector","institutionData","LoginComponent","lazy","LoginContainer","props","access_token","handleLoginState","bind","this","authToken","history","replace","prevProps","prevState","loginMessageResponse","institutionDataResponse","initiateGoogleLogin","refresh_token","localStorage","setItem","token","getProfileInstitutionData","length","setState","clientId","PureComponent","connect","dispatch","params","loginWithGoogle","getInstitutionData","GoogleOAuthContext","createContext","GoogleOAuthProvider","onScriptLoadSuccess","onScriptLoadError","children","scriptLoadedSuccessfully","options","useState","setScriptLoadedSuccessfully","onScriptLoadSuccessRef","useRef","current","onScriptLoadErrorRef","useEffect","scriptTag","document","createElement","src","async","defer","onload","_a","call","onerror","body","appendChild","removeChild","useLoadGsiScript","contextValue","useMemo","React","Provider","value","useGoogleOAuth","context","useContext","Error","useGoogleLogin","flow","scope","onSuccess","onError","onNonOAuthError","overrideScope","clientRef","onSuccessRef","onErrorRef","onNonOAuthErrorRef","clientMethod","client","window","google","accounts","oauth2","client_id","callback","response","_b","error","error_callback","nonOAuthError","loginImplicitFlow","useCallback","overrideConfig","requestAccessToken","loginAuthCodeFlow","requestCode"],"sourceRoot":""}