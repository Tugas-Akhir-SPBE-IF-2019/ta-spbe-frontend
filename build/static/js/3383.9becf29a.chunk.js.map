{"version":3,"file":"static/js/3383.9becf29a.chunk.js","mappings":"mTAAMA,EAA2B,SAACC,GAAgB,IAAD,EAC7C,OAAY,OAALA,QAAK,IAALA,GAA8B,QAAzB,EAALA,EAAOC,+BAAuB,OAA9B,EAAgCC,iBACjCF,EAAMC,wBAAwBC,iBAC9B,IACV,EAEMC,EAA0B,SAACH,GAAgB,IAAD,EAC5C,OAAY,OAALA,QAAK,IAALA,GAA8B,QAAzB,EAALA,EAAOC,+BAAuB,OAA9B,EAAgCG,gBACjCJ,EAAMC,wBAAwBG,gBAC9B,IACV,E,mBCJMC,GAA4BC,EAAAA,EAAAA,OAAK,kBAAM,+FAA2C,IAE3EC,EAAyB,0CAMlC,WAAYC,GAAa,IAAD,EASyC,OATzC,gBACpB,cAAMA,IACDR,MAAQ,CACTS,UAAW,GACXC,iBAAkB,IAEtB,EAAKC,gBAAkB,EAAKA,gBAAgBC,MAAK,WACjD,EAAKC,SAAW,EAAKA,SAASD,MAAK,WACnC,EAAKE,WAAa,EAAKA,WAAWF,MAAK,WACvC,EAAKG,mBAAqB,EAAKA,mBAAmBH,MAAK,WAAM,CACjE,CA+DC,OA/DA,yCAED,WACI,IAAQI,EAAOC,KAAKT,MAAMU,MAAMC,OAAxBH,GACRC,KAAKT,MAAMY,wBAAwBJ,EACvC,GAAC,gCAED,SAAmBK,GACXA,EAAUC,2BAA6BL,KAAKT,MAAMc,0BAClDL,KAAKH,YAEb,GAAC,6BAED,SAAwBS,GAEpB,OADcC,EAAQ,KACfC,CAAMC,OAAOH,GACxB,GAAC,sBAED,SAAiBI,GACbC,UAAUC,UAAUC,UAAUH,EAClC,GAAC,wBAED,WACI,IAAQL,EAA6BL,KAAKT,MAAlCc,yBACJS,EAAc,GACdC,GAAW,OAAIC,MAAM,KAAKC,KAAI,SAAAC,GAAC,OAAIF,OAAO,IAC9CX,EAAyBc,OAAOC,SAAQ,SAAUC,GACzCP,EAAKQ,SAASD,EAAKE,mBACpBT,EAAKU,KAAKH,EAAKE,kBAEnBF,EAAKI,uBAAuBL,SAAQ,SAAUM,GACrCX,EAASM,EAAKE,iBAAmB,GAAGD,SAASI,EAAIC,OAClDZ,EAASM,EAAKE,iBAAmB,GAAGC,KAAKE,EAAIC,KAErD,GACJ,IACA3B,KAAK4B,UAAS,kBACP5B,KAAKjB,OAAK,IACbS,UAAWsB,EACXrB,iBAAkBsB,IAE1B,GAAC,gCAED,WACI,IAAQhB,EAAOC,KAAKT,MAAMU,MAAMC,OAAxBH,GACRC,KAAKT,MAAMsC,iBAAiB9B,EAChC,GAAC,oBAED,WACI,IAAQA,EAAOC,KAAKT,MAAMU,MAAMC,OAAxBH,GACAM,EAA6BL,KAAKT,MAAlCc,yBACR,EAAwCL,KAAKjB,MAArCS,EAAS,EAATA,UAAWC,EAAgB,EAAhBA,iBACnB,OACI,SAACL,EAAyB,CACtB0C,aAAc/B,EACdM,yBAA0BA,EAC1BX,gBAAiBM,KAAKN,gBACtBE,SAAUI,KAAKJ,SACfJ,UAAWA,EACXC,iBAAkBA,EAClBK,mBAAoBE,KAAKF,oBAGrC,KAAC,EA/EiC,CAASiC,EAAAA,eAgG/C,OAAeC,EAAAA,EAAAA,KAdS,SAACjD,GACrB,MAAO,CACHsB,yBAA0BvB,EAAyBC,GACnDkD,wBAAyB/C,EAAwBH,GAEzD,IAEA,SAA4BmD,GACxB,MAAO,CACH/B,wBAAyB,SAACD,GAAW,OAAKgC,GAASC,EAAAA,EAAAA,IAAoBjC,GAAQ,EAC/E2B,iBAAkB,SAAC3B,GAAW,OAAKgC,GAASE,EAAAA,EAAAA,IAAalC,GAAQ,EAEzE,GAEA,CAGEZ,E","sources":["containers/AssessmentResult/selector.tsx","containers/AssessmentResult/index.tsx"],"sourcesContent":["const assessmentResultSelector = (state: any) => {\n    return state?.assessmentResultReducer?.assessmentResult\n        ? state.assessmentResultReducer.assessmentResult\n        : null;\n};\n\nconst downloadMessageSelector = (state: any) => {\n    return state?.assessmentResultReducer?.downloadMessage\n        ? state.assessmentResultReducer.downloadMessage\n        : null;\n};\n\nexport {\n    assessmentResultSelector,\n    downloadMessageSelector,\n};\n","import { lazy, PureComponent } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { assessmentResultSelector, downloadMessageSelector } from \"./selector\";\nimport { getAssessmentResult, downloadFile } from \"./action\";\n\nconst AssessmentResultComponent = lazy(() => import(\"../../components/AssessmentResult\"));\n\nexport class AssessmentResultContainer extends PureComponent<any, any> {\n    static propTypes = {\n        history: PropTypes.any,\n        assessmentResultResponse: PropTypes.any,\n    };\n\n    constructor(props: any) {\n        super(props);\n        this.state = {\n            link_list: [],\n            support_doc_name: [],\n        };\n        this.handleParseHTML = this.handleParseHTML.bind(this);\n        this.copyText = this.copyText.bind(this);\n        this.createLink = this.createLink.bind(this);\n        this.handleDownloadFile = this.handleDownloadFile.bind(this);\n    }\n\n    componentDidMount() {\n        const { id } = this.props.match.params;\n        this.props.getAssessmentResultData(id);\n    }\n\n    componentDidUpdate(prevProps: any) {\n        if (prevProps.assessmentResultResponse !== this.props.assessmentResultResponse) {\n            this.createLink();\n        }\n    }\n\n    private handleParseHTML(raw: any): any {\n        const parse = require('html-react-parser');\n        return parse(String(raw));\n    }\n\n    private copyText(text: string): void {\n        navigator.clipboard.writeText(text);\n    }\n\n    private createLink(): void {\n        const { assessmentResultResponse } = this.props;\n        let list: any[] = [];\n        let doc_name = [...Array(10)].map(e => Array());\n        assessmentResultResponse.result.forEach(function (item) {\n            if (!list.includes(item.indicator_number)) {\n                list.push(item.indicator_number);\n            }\n            item.support_document_proof.forEach(function (doc) {\n                if (!doc_name[item.indicator_number - 1].includes(doc.name)) {\n                    doc_name[item.indicator_number - 1].push(doc.name);\n                }\n            });\n        });\n        this.setState({\n            ...this.state,\n            link_list: list,\n            support_doc_name: doc_name,\n        });\n    }\n\n    private handleDownloadFile(): void {\n        const { id } = this.props.match.params;\n        this.props.callDownloadFile(id);\n    }\n\n    render() {\n        const { id } = this.props.match.params;\n        const { assessmentResultResponse } = this.props;\n        const { link_list, support_doc_name } = this.state;\n        return (\n            <AssessmentResultComponent\n                assessmentId={id}\n                assessmentResultResponse={assessmentResultResponse}\n                handleParseHTML={this.handleParseHTML}\n                copyText={this.copyText}\n                link_list={link_list}\n                support_doc_name={support_doc_name}\n                handleDownloadFile={this.handleDownloadFile}\n            />\n        )\n    }\n}\n\nconst mapStateToProps = (state: any) => {\n    return {\n        assessmentResultResponse: assessmentResultSelector(state),\n        downloadMessageResponse: downloadMessageSelector(state),\n    };\n};\n  \nfunction mapDispatchToProps(dispatch: any) {\n    return {\n        getAssessmentResultData: (params: any) => dispatch(getAssessmentResult(params)),\n        callDownloadFile: (params: any) => dispatch(downloadFile(params)),\n    };\n}\n  \nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(AssessmentResultContainer);"],"names":["assessmentResultSelector","state","assessmentResultReducer","assessmentResult","downloadMessageSelector","downloadMessage","AssessmentResultComponent","lazy","AssessmentResultContainer","props","link_list","support_doc_name","handleParseHTML","bind","copyText","createLink","handleDownloadFile","id","this","match","params","getAssessmentResultData","prevProps","assessmentResultResponse","raw","require","parse","String","text","navigator","clipboard","writeText","list","doc_name","Array","map","e","result","forEach","item","includes","indicator_number","push","support_document_proof","doc","name","setState","callDownloadFile","assessmentId","PureComponent","connect","downloadMessageResponse","dispatch","getAssessmentResult","downloadFile"],"sourceRoot":""}