{"version":3,"file":"static/js/3854.4bcc466d.chunk.js","mappings":"iTAAMA,EAAoB,SAACC,GAAgB,IAAD,EACtC,OAAY,OAALA,QAAK,IAALA,GAA4B,QAAvB,EAALA,EAAOC,6BAAqB,OAA5B,EAA8BC,UAC/BF,EAAMC,sBAAsBC,UAC5B,EACV,E,6BCGMC,GAA0BC,EAAAA,EAAAA,OAAK,kBAAM,uDAAyC,IAEvEC,EAAuB,0CAMhC,WAAYC,GAAa,IAAD,EAiByB,OAjBzB,gBACpB,cAAMA,IACDN,MAAQ,CACTO,MAAO,GACPC,KAAM,EACNC,YAAa,GACbC,MAAO,GACPC,WAAY,GACZC,SAAU,GACVC,UAAW,EACXC,UAAW,EACXC,YAAa,EACbC,eAAgB,IAEpB,EAAKC,kBAAoB,EAAKA,kBAAkBC,MAAK,WACrD,EAAKC,aAAe,EAAKA,aAAaD,MAAK,WAC3C,EAAKE,WAAa,EAAKA,WAAWF,MAAK,WACvC,EAAKG,WAAa,EAAKA,WAAWH,MAAK,WAAM,CACjD,CA8HC,OA9HA,yCAED,WACII,KAAKhB,MAAMiB,aAAaD,KAAKtB,MACjC,GAAC,gCAED,SAAmBwB,EAAgBC,GAAiB,IAAD,OACvCC,EAAkBJ,KAAKhB,MAAvBoB,cACAlB,EAASc,KAAKtB,MAAdQ,KAER,GAAIgB,EAAUE,gBAAkBA,EAAe,CAC3C,IAAIC,EAAoB,GAExBA,EAAWC,MAAK,SAACC,EAAA,OAAe,CAC5BC,OAAiB,IAATtB,EACRuB,MAAO,EACPC,QAAS,kBAAM,EAAKf,kBAAkB,CAACgB,OAAQ,CAACC,KAAM,OAAQH,MAAO,IAAK,OAAO,EAAC,SACjF,OAEDvB,EAAK,EAAI,GACTmB,EAAWC,MAAK,SAACC,EAAA,WAAmB,KAGxC,IAFC,kBAGOM,EAAI,GAAW,IAANA,GAAWA,EAAIT,EAAcX,aACtCY,EAAWC,MAAK,SAACC,EAAA,OAAe,CAC5BC,OAAQtB,IAAS2B,EACjBJ,MAAOI,EACPH,QAAS,kBAAM,EAAKf,kBAAkB,CAACgB,OAAQ,CAACC,KAAM,OAAQH,MAAOI,IAAK,OAAO,EAAC,SAChFA,IAEd,EARSA,EAAE3B,EAAK,EAAG2B,GAAG3B,EAAK,EAAG2B,IAAG,KAU7B3B,EAAK,EAAIkB,EAAcX,YAAY,GACnCY,EAAWC,MAAK,SAACC,EAAA,WAAmB,KAGN,IAA9BH,EAAcX,aACdY,EAAWC,MAAK,SAACC,EAAA,OAAe,CAC5BC,OAAQtB,IAASkB,EAAcX,YAC/BgB,MAAOL,EAAcX,YACrBiB,QAAS,kBAAM,EAAKf,kBAAkB,CAACgB,OAAQ,CAACC,KAAM,OAAQH,MAAOL,EAAcX,cAAe,OAAO,EAAC,SACxGW,EAAcX,eAGxBO,KAAKc,UAAS,kBACPd,KAAKtB,OAAK,IACbe,YAAaW,EAAcX,YAC3BC,eAAgBW,IAExB,CAEIF,EAAUjB,OAASA,GACnBc,KAAKH,cAAa,EAE1B,GAAC,+BAED,SAA0BkB,EAAQC,GAC9B,GAAa,SAATA,EAAiB,CACjB,IACI5B,EADc2B,EAAEJ,OAAZF,MACUQ,MAAM,OACxBjB,KAAKc,UAAS,kBACPd,KAAKtB,OAAK,IACbW,WAAYD,EAAM,GAClBE,SAAUF,EAAM,KAExB,KACK,CAED,MAAwB2B,EAAEJ,OAAlBC,EAAI,EAAJA,KAAMH,EAAK,EAALA,MACdT,KAAKc,UAAS,kBACPd,KAAKtB,OAAK,cACZkC,EAAOH,IAEhB,CACJ,GAAC,0BAED,SAAqBS,GACjB,MAAiFlB,KAAKtB,MAA9EO,EAAK,EAALA,MAAOC,EAAI,EAAJA,KACXiC,EAAa,CACblC,MAAOA,EACPC,KAAOgC,EAAahC,EAAO,EAC3BC,YAJ4B,EAAXA,YAKjBE,WALwC,EAAVA,WAM9BC,SANkD,EAARA,SAO1CC,UAP6D,EAATA,UAQpDC,UARwE,EAATA,WAUnEQ,KAAKhB,MAAMiB,aAAakB,EAC5B,GAAC,wBAED,WACI,MAA8BnB,KAAKtB,MAA3BQ,EAAI,EAAJA,KACJA,EAAK,GADgB,EAAXO,aAEVO,KAAKc,UAAS,kBACPd,KAAKtB,OAAK,IACbQ,KAAMA,EAAK,IAGvB,GAAC,wBAED,WACI,IAAQA,EAASc,KAAKtB,MAAdQ,KACJA,EAAK,GAAK,GACVc,KAAKc,UAAS,kBACPd,KAAKtB,OAAK,IACbQ,KAAMA,EAAK,IAGvB,GAAC,oBAED,WACI,IAAQkB,EAAkBJ,KAAKhB,MAAvBoB,cACR,EAAiDJ,KAAKtB,MAA9CgB,EAAc,EAAdA,eAAgBH,EAAS,EAATA,UAAWC,EAAS,EAATA,UACnC,OACI,SAACX,EAAuB,CACpBuB,cAAeA,EACfT,kBAAmBK,KAAKL,kBACxBE,aAAcG,KAAKH,aACnBH,eAAgBA,EAChBI,WAAYE,KAAKF,WACjBC,WAAYC,KAAKD,WACjBR,UAAWA,EACXC,UAAWA,GAGvB,KAAC,EAtJ+B,CAAS4B,EAAAA,eAqK7C,OAAeC,EAAAA,EAAAA,KAZS,SAAC3C,GACrB,MAAO,CACH0B,cAAe3B,EAAkBC,GAEzC,IAEA,SAA4B4C,GACxB,MAAO,CACHrB,aAAc,SAACsB,GAAW,OAAKD,GAASE,EAAAA,EAAAA,GAAaD,GAAQ,EAErE,GAEA,CAGExC,E","sources":["containers/GuestDashboard/selector.tsx","containers/GuestDashboard/index.tsx"],"sourcesContent":["const indexListSelector = (state: any) => {\n    return state?.guestDashboardReducer?.indexList\n        ? state.guestDashboardReducer.indexList\n        : [];\n};\n\nexport { indexListSelector };\n","import { lazy, PureComponent } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { indexListSelector } from \"./selector\";\nimport { getIndexList } from \"./action\";\nimport { Pagination } from 'react-bootstrap';\n\nconst GuestDashboardComponent = lazy(() => import(\"../../components/GuestDashboard\"));\n\nexport class GuestDashboardContainer extends PureComponent<any, any> {\n    static propTypes = {\n        history: PropTypes.any,\n        indexResponse: PropTypes.any,\n    };\n\n    constructor(props: any) {\n        super(props);\n        this.state = {\n            limit: 10,\n            page: 1,\n            institution: \"\",\n            dates: \"\",\n            start_date: \"\",\n            end_date: \"\",\n            index_min: 1,\n            index_max: 4,\n            total_pages: 0,\n            page_component: [],\n        };\n        this.handleInputChange = this.handleInputChange.bind(this);\n        this.submitFilter = this.submitFilter.bind(this);\n        this.handleNext = this.handleNext.bind(this);\n        this.handlePrev = this.handlePrev.bind(this);\n    }\n\n    componentDidMount() {\n        this.props.getIndexData(this.state);\n    }\n\n    componentDidUpdate(prevProps: any, prevState: any) {\n        const { indexResponse } = this.props;\n        const { page } = this.state;\n\n        if (prevProps.indexResponse !== indexResponse) {\n            let components: any[] = [];\n\n            components.push(<Pagination.Item\n                active={page === 1}\n                value={1}\n                onClick={() => this.handleInputChange({target: {name: \"page\", value: 1}}, \"PAGE\")}\n                >1</Pagination.Item>);\n\n            if (page-2 > 2) {\n                components.push(<Pagination.Ellipsis />);\n            }\n\n            for (let p=page-2; p<=page+2; p++) {\n                if (p > 0 && p !== 1 && p < indexResponse.total_pages) {\n                    components.push(<Pagination.Item\n                        active={page === p}\n                        value={p}\n                        onClick={() => this.handleInputChange({target: {name: \"page\", value: p}}, \"PAGE\")}\n                        >{p}</Pagination.Item>);\n                }\n            }\n\n            if (page+2 < indexResponse.total_pages-1) {\n                components.push(<Pagination.Ellipsis />);\n            }\n\n            if (indexResponse.total_pages !== 1) {\n                components.push(<Pagination.Item\n                    active={page === indexResponse.total_pages}\n                    value={indexResponse.total_pages}\n                    onClick={() => this.handleInputChange({target: {name: \"page\", value: indexResponse.total_pages}}, \"PAGE\")}\n                    >{indexResponse.total_pages}</Pagination.Item>);\n            }\n\n            this.setState({\n                ...this.state,\n                total_pages: indexResponse.total_pages,\n                page_component: components,\n            });\n        }\n\n        if (prevState.page !== page) {\n            this.submitFilter(true);\n        }\n    }\n\n    private handleInputChange(e: any, type: string): void {\n        if (type === \"DATE\") {\n            const { value } = e.target;\n            let dates = value.split(\" - \");\n            this.setState({\n                ...this.state,\n                start_date: dates[0],\n                end_date: dates[1],\n            });\n        }\n        else {\n            // Type === INSTITUTION / LIMIT / PAGE\n            const { name, value } = e.target;\n            this.setState({\n                ...this.state,\n                [name]: value,\n            });\n        }\n    }\n\n    private submitFilter(changePage: any): void {\n        const { limit, page, institution, start_date, end_date, index_min, index_max } = this.state;\n        let formValues = {\n            limit: limit,\n            page: (changePage ? page : 1),\n            institution: institution,\n            start_date: start_date,\n            end_date: end_date,\n            index_min: index_min,\n            index_max: index_max,\n        }\n        this.props.getIndexData(formValues);\n    }\n\n    private handleNext(): void {\n        const { page, total_pages } = this.state;\n        if (page+1 <= total_pages) {\n            this.setState({\n                ...this.state,\n                page: page+1,\n            });\n        }\n    }\n\n    private handlePrev(): void {\n        const { page } = this.state;\n        if (page-1 >= 1) {\n            this.setState({\n                ...this.state,\n                page: page-1,\n            });\n        }\n    }\n\n    render() {\n        const { indexResponse } = this.props;\n        const { page_component, index_min, index_max } = this.state;\n        return (\n            <GuestDashboardComponent\n                indexResponse={indexResponse}\n                handleInputChange={this.handleInputChange}\n                submitFilter={this.submitFilter}\n                page_component={page_component}\n                handleNext={this.handleNext}\n                handlePrev={this.handlePrev}\n                index_min={index_min}\n                index_max={index_max}\n            />\n        )\n    }\n}\n\nconst mapStateToProps = (state: any) => {\n    return {\n        indexResponse: indexListSelector(state),\n    };\n};\n  \nfunction mapDispatchToProps(dispatch: any) {\n    return {\n        getIndexData: (params: any) => dispatch(getIndexList(params)),\n    };\n}\n  \nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(GuestDashboardContainer);"],"names":["indexListSelector","state","guestDashboardReducer","indexList","GuestDashboardComponent","lazy","GuestDashboardContainer","props","limit","page","institution","dates","start_date","end_date","index_min","index_max","total_pages","page_component","handleInputChange","bind","submitFilter","handleNext","handlePrev","this","getIndexData","prevProps","prevState","indexResponse","components","push","Pagination","active","value","onClick","target","name","p","setState","e","type","split","changePage","formValues","PureComponent","connect","dispatch","params","getIndexList"],"sourceRoot":""}