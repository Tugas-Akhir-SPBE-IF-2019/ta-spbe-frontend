{"version":3,"file":"static/js/6400.7157dc2a.chunk.js","mappings":"iTAAMA,EAAkB,SAACC,GAAgB,IAAD,EACpC,OAAY,OAALA,QAAK,IAALA,GAAyB,QAApB,EAALA,EAAOC,0BAAkB,OAAzB,EAA2BC,QAC5BF,EAAMC,mBAAmBC,QACzB,IACV,EAEMC,EAA0B,SAACH,GAAgB,IAAD,EAC5C,OAAY,OAALA,QAAK,IAALA,GAAyB,QAApB,EAALA,EAAOC,0BAAkB,OAAzB,EAA2BG,eAC5BJ,EAAMC,mBAAmBG,eACzB,EACV,E,mBCEMC,GAA0BC,EAAAA,EAAAA,OAAK,kBAAM,qFAAyC,IAEvEC,EAAuB,0CAOhC,WAAYC,GAAa,IAAD,EAa2B,OAb3B,gBACpB,cAAMA,IACDR,MAAQ,CACTS,MAAO,GACPC,KAAM,GACNC,eAAgB,GAChBC,iBAAkB,GAClBC,QAAS,GACTC,gBAAiB,GACjBC,WAAW,GAEf,EAAKC,kBAAoB,EAAKA,kBAAkBC,MAAK,WACrD,EAAKC,oBAAsB,EAAKA,oBAAoBD,MAAK,WACzD,EAAKE,YAAc,EAAKA,YAAYF,MAAK,WAAM,CACnD,CAmEC,OAnEA,yCAED,WACIG,KAAKZ,MAAMa,mBACf,GAAC,gCAED,SAAmBC,GACf,GAAIA,EAAUC,kBAAoBH,KAAKZ,MAAMe,gBAAiB,CAC1D,IAAIC,GAAM,UAAOJ,KAAKZ,MAAMe,wBACrBC,EAAOC,qBACPD,EAAOE,qBACdN,KAAKO,UAAS,kBACPP,KAAKpB,OACLwB,GAEX,CACIF,EAAUM,0BAA4BR,KAAKZ,MAAMoB,yBACjDR,KAAKD,aAEb,GAAC,+BAED,SAA0BU,GACtB,MAA+BA,EAAEC,OAAzBpB,EAAI,EAAJA,KAAMqB,EAAK,EAALA,MAAOC,EAAK,EAALA,MACP,OAAVA,EACAZ,KAAKO,UAAS,kBACPP,KAAKpB,OAAK,cACZU,EAAOsB,EAAM,MAGH,OAAVD,GACLX,KAAKO,UAAS,kBACPP,KAAKpB,OAAK,cACZU,EAAOqB,IAGpB,GAAC,iCAED,SAA4BF,GACxBA,EAAEI,iBACFb,KAAKZ,MAAM0B,qBAAqBd,KAAKpB,MACzC,GAAC,yBAED,WACIoB,KAAKO,UAAS,kBACPP,KAAKpB,OAAK,IACbe,WAAYK,KAAKpB,MAAMe,YAE/B,GAAC,oBAED,WACI,IAAQQ,EAAoBH,KAAKZ,MAAzBe,gBACR,EAA+FH,KAAKpB,MAA5FS,EAAK,EAALA,MAAOC,EAAI,EAAJA,KAAMC,EAAc,EAAdA,eAAgBC,EAAgB,EAAhBA,iBAAkBC,EAAO,EAAPA,QAASC,EAAe,EAAfA,gBAAiBC,EAAS,EAATA,UACjF,OACI,SAACV,EAAuB,CACpBkB,gBAAiBA,EACjBd,MAAOA,EACPC,KAAMA,EACNC,eAAgBA,EAChBC,iBAAkBA,EAClBC,QAASA,EACTC,gBAAiBA,EACjBE,kBAAmBI,KAAKJ,kBACxBE,oBAAqBE,KAAKF,oBAC1BH,UAAWA,EACXI,YAAaC,KAAKD,aAG9B,KAAC,EAxF+B,CAASgB,EAAAA,eAyG7C,OAAeC,EAAAA,EAAAA,KAdS,SAACpC,GACrB,MAAO,CACHuB,gBAAiBxB,EAAgBC,GACjC4B,wBAAyBzB,EAAwBH,GAEzD,IAEA,SAA4BqC,GACxB,MAAO,CACHhB,kBAAmB,kBAAMgB,GAASC,EAAAA,EAAAA,MAAa,EAC/CJ,qBAAsB,SAACK,GAAW,OAAKF,GAASG,EAAAA,EAAAA,IAAcD,GAAQ,EAE9E,GAEA,CAGEhC,E","sources":["containers/EditProfileBio/selector.tsx","containers/EditProfileBio/index.tsx"],"sourcesContent":["const biodataSelector = (state: any) => {\n    return state?.editBiodataReducer?.biodata\n        ? state.editBiodataReducer.biodata\n        : null;\n};\n\nconst successMessagesSelector = (state: any) => {\n    return state?.editBiodataReducer?.successMessage\n        ? state.editBiodataReducer.successMessage\n        : \"\";\n};\n\nexport {\n    biodataSelector,\n    successMessagesSelector\n};\n","import { lazy, PureComponent } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport {\n    biodataSelector,\n    successMessagesSelector\n} from \"./selector\";\nimport {\n    getBiodata,\n    updateBiodata\n} from \"./action\";\n\nconst EditProfileBioComponent = lazy(() => import(\"../../components/EditProfileBio\"));\n\nexport class EditProfileBioContainer extends PureComponent<any, any> {\n    static propTypes = {\n        history: PropTypes.any,\n        biodataResponse: PropTypes.any,\n        successMessagesResponse: PropTypes.string,\n    };\n\n    constructor(props: any) {\n        super(props);\n        this.state = {\n            email: \"\",\n            name: \"\",\n            contact_number: \"\",\n            linkedin_profile: \"\",\n            address: \"\",\n            profile_picture: \"\",\n            showModal: false,\n        };\n        this.handleInputChange = this.handleInputChange.bind(this);\n        this.handleUpdateBiodata = this.handleUpdateBiodata.bind(this);\n        this.toggleModal = this.toggleModal.bind(this);\n    }\n\n    componentDidMount() {\n        this.props.getProfileBiodata();\n    }\n\n    componentDidUpdate(prevProps: any) {\n        if (prevProps.biodataResponse !== this.props.biodataResponse) {\n            let newBio = {...this.props.biodataResponse};\n            delete newBio.house_address;\n            delete newBio.profile_picture_link;\n            this.setState({\n                ...this.state,\n                ...newBio,\n            });\n        }\n        if (prevProps.successMessagesResponse !== this.props.successMessagesResponse) {\n            this.toggleModal();\n        }\n    }\n\n    private handleInputChange(e: any): void {\n        const { name, value, files } = e.target;\n        if (files !== null) {\n            this.setState({\n                ...this.state,\n                [name]: files[0],\n            });\n        }\n        else if (value !== null) {\n            this.setState({\n                ...this.state,\n                [name]: value,\n            });\n        }\n    }\n\n    private handleUpdateBiodata(e: any): void {\n        e.preventDefault();\n        this.props.updateProfileBiodata(this.state);\n    }\n    \n    private toggleModal(): void {\n        this.setState({\n            ...this.state,\n            showModal: !this.state.showModal,\n        });\n    }\n\n    render() {\n        const { biodataResponse } = this.props;\n        const { email, name, contact_number, linkedin_profile, address, profile_picture, showModal } = this.state;\n        return (\n            <EditProfileBioComponent\n                biodataResponse={biodataResponse}\n                email={email}\n                name={name}\n                contact_number={contact_number}\n                linkedin_profile={linkedin_profile}\n                address={address}\n                profile_picture={profile_picture}\n                handleInputChange={this.handleInputChange}\n                handleUpdateBiodata={this.handleUpdateBiodata}\n                showModal={showModal}\n                toggleModal={this.toggleModal}\n            />\n        )\n    }\n}\n\nconst mapStateToProps = (state: any) => {\n    return {\n        biodataResponse: biodataSelector(state),\n        successMessagesResponse: successMessagesSelector(state),\n    };\n};\n  \nfunction mapDispatchToProps(dispatch: any) {\n    return {\n        getProfileBiodata: () => dispatch(getBiodata()),\n        updateProfileBiodata: (params: any) => dispatch(updateBiodata(params)),\n    };\n}\n  \nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(EditProfileBioContainer);"],"names":["biodataSelector","state","editBiodataReducer","biodata","successMessagesSelector","successMessage","EditProfileBioComponent","lazy","EditProfileBioContainer","props","email","name","contact_number","linkedin_profile","address","profile_picture","showModal","handleInputChange","bind","handleUpdateBiodata","toggleModal","this","getProfileBiodata","prevProps","biodataResponse","newBio","house_address","profile_picture_link","setState","successMessagesResponse","e","target","value","files","preventDefault","updateProfileBiodata","PureComponent","connect","dispatch","getBiodata","params","updateBiodata"],"sourceRoot":""}